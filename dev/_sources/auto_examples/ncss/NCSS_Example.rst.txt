
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ncss/NCSS_Example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_ncss_NCSS_Example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ncss_NCSS_Example.py:


==========
Basic NCSS
==========

Use Siphon to query the NetCDF Subset Service (NCSS).

.. GENERATED FROM PYTHON SOURCE LINES 11-17

.. code-block:: default

    from datetime import datetime

    import matplotlib.pyplot as plt

    from siphon.catalog import TDSCatalog


.. GENERATED FROM PYTHON SOURCE LINES 18-21

First we construct a TDSCatalog instance pointing to our dataset of interest, in
this case TDS' "Best" virtual dataset for the GFS global 0.5 degree collection of
GRIB files. We see this catalog contains a single dataset.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

.. code-block:: default

    best_gfs = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/grib/NCEP/GFS/'
                          'Global_0p5deg/catalog.xml?dataset=grib/NCEP/GFS/Global_0p5deg/Best')
    print(best_gfs.datasets)


.. GENERATED FROM PYTHON SOURCE LINES 26-27

We pull out this dataset and get the NCSS access point

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    best_ds = best_gfs.datasets[0]
    ncss = best_ds.subset()


.. GENERATED FROM PYTHON SOURCE LINES 31-33

We can then use the `ncss` object to create a new query object, which
facilitates asking for data from the server.

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: default

    query = ncss.query()


.. GENERATED FROM PYTHON SOURCE LINES 36-41

We construct a query asking for data corresponding to latitude 40N and longitude 105W,
for the current time. We also ask for NetCDF version 4 data, for the variables
'Temperature_isobaric' and 'Relative_humidity_isobaric'. This request will return all
vertical levels for a single point and single time. Note the string representation of
the query is a properly encoded query string.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default

    query.lonlat_point(-105, 40).time(datetime.utcnow())
    query.accept('netcdf4')
    query.variables('Temperature_isobaric', 'Relative_humidity_isobaric')


.. GENERATED FROM PYTHON SOURCE LINES 46-49

We now request data from the server using this query. The `NCSS` class handles parsing
this NetCDF data (using the `netCDF4` module). If we print out the variable names,
we see our requested variables, as well as a few others (more metadata information)

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    data = ncss.get_data(query)
    list(data.variables)


.. GENERATED FROM PYTHON SOURCE LINES 53-57

We'll pull out the variables we want to use, as well as the pressure values. To get the
name of the correct variable for pressure (which matches the levels for temperature and
relative humidity, we look at the `coordinates` attribute. The last of the variables
listed in `coordinates` is the pressure dimension.

.. GENERATED FROM PYTHON SOURCE LINES 57-65

.. code-block:: default

    temp = data.variables['Temperature_isobaric']
    relh = data.variables['Relative_humidity_isobaric']
    vert_name = relh.coordinates.split()[-1]
    vert = data.variables[vert_name]
    press_vals = vert[:].squeeze()

    # Due to a different number of vertical levels find where they are common


.. GENERATED FROM PYTHON SOURCE LINES 66-67

Now we can plot these up using matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 67-80

.. code-block:: default

    fig, ax = plt.subplots(1, 1, figsize=(9, 8))
    ax.plot(temp[:].squeeze(), press_vals, 'r', linewidth=2)
    ax.set_xlabel(f'Temperature ({temp.units})')
    ax.set_ylabel(f'{vert_name} ({vert.units})')

    # Create second plot with shared y-axis
    ax2 = plt.twiny(ax)
    ax2.plot(relh[:].squeeze(), press_vals, 'g', linewidth=2)
    ax2.set_xlabel(f'Relative Humidity ({relh.units})')
    ax.set_ylim(press_vals.max(), press_vals.min())
    ax.grid(True)

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_ncss_NCSS_Example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: NCSS_Example.py <NCSS_Example.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: NCSS_Example.ipynb <NCSS_Example.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
